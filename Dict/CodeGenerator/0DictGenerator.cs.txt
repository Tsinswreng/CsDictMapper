using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Tsinswreng.CsSrcGen.Tools;


namespace Tsinswreng.CsSrcGen.Dict.CodeGenerator;

[Generator]
public class DictGenerator :ISourceGenerator{
	public void Execute(GeneratorExecutionContext context) {
		//Logger.Write("123");+

		var dictContextClasses = context.Compilation.SyntaxTrees
			.SelectMany(syntaxTree => syntaxTree.GetRoot().DescendantNodes())
			.OfType<ClassDeclarationSyntax>()
			.Where(cds => cds.AttributeLists
				.SelectMany(al => al.Attributes)
				.Any(attr => attr.Name.ToString() == "DictType"))
			.ToList();

		foreach (var classDeclaration in dictContextClasses) {
			// 获取类名和命名空间
			var className = classDeclaration.Identifier.Text;
			var namespaceName = GetNamespace(classDeclaration);

			// 获取 DictTypeAttribute 的 TargetType
			var targetType = GetTargetType(classDeclaration, context);
			Logger.Append(targetType?.Name??"null");//t

			if (targetType != null) {
				// 生成扩展方法
				var sourceCode = GenerateExtensionMethod(namespaceName, className, targetType, context);
				var FileName = $"{className}Extensions.g.cs";
				Logger.Append(sourceCode);
				Logger.Write(FileName, sourceCode);

				context.AddSource(FileName, sourceCode);
			}
		}
	}


	private string GetNamespace(ClassDeclarationSyntax classDeclaration) {
		SyntaxNode? potentialNamespaceParent = classDeclaration.Parent;
		while (potentialNamespaceParent != null &&
				!(potentialNamespaceParent is NamespaceDeclarationSyntax) &&
				!(potentialNamespaceParent is FileScopedNamespaceDeclarationSyntax)) {
			potentialNamespaceParent = potentialNamespaceParent.Parent;
		}

		if (potentialNamespaceParent is NamespaceDeclarationSyntax namespaceDeclaration) {
			return namespaceDeclaration.Name.ToString();
		} else if (potentialNamespaceParent is FileScopedNamespaceDeclarationSyntax fileScopedNamespaceDeclaration) {
			return fileScopedNamespaceDeclaration.Name.ToString();
		}

		return string.Empty;
	}

	private ITypeSymbol? GetTargetType(ClassDeclarationSyntax classDeclaration, GeneratorExecutionContext context) {
		foreach (var attributeList in classDeclaration.AttributeLists) {
			foreach (var attribute in attributeList.Attributes) {
				if (attribute.Name.ToString() == "DictType" && attribute.ArgumentList != null && attribute.ArgumentList.Arguments.Count > 0) {
					var typeOfExpression = attribute.ArgumentList.Arguments[0].Expression as TypeOfExpressionSyntax;
					if (typeOfExpression != null) {
						var typeSymbol = context.Compilation.GetTypeByMetadataName(typeOfExpression.Type.ToString());
						return typeSymbol;
					}
				}
			}
		}
		return null;
	}

	private string GenerateExtensionMethod(string namespaceName, string className, ITypeSymbol targetType, GeneratorExecutionContext context) {
		var targetTypeName = targetType.Name;
		var properties = targetType.GetMembers().OfType<IPropertySymbol>().Where(p => !p.IsStatic && p.DeclaredAccessibility == Accessibility.Public);

		StringBuilder source = new StringBuilder();
		source.AppendLine("using System.Collections.Generic;");
		source.AppendLine();

		if (!string.IsNullOrEmpty(namespaceName)) {
			source.AppendLine($"namespace {namespaceName}");
			source.AppendLine("{");
		}

		source.AppendLine($" public static class {className}Extensions");
		source.AppendLine(" {");
		source.AppendLine($"  public static Dictionary<string, object?> ToDict<T>(this {className} ctx, T obj) where T : class");
		source.AppendLine("  {");
		source.AppendLine("   var dict = new Dictionary<string, object?>();");
		source.AppendLine($"   if (obj is not {targetTypeName} target)");
		source.AppendLine("   {");
		source.AppendLine("    return dict;");
		source.AppendLine("   }");

		foreach (var property in properties) {
			source.AppendLine($"   dict[\"{property.Name}\"] = target.{property.Name};");
		}

		source.AppendLine("   return dict;");
		source.AppendLine("  }");
		source.AppendLine(" }");

		if (!string.IsNullOrEmpty(namespaceName)) {
			source.AppendLine("}");
		}

		return source.ToString();
	}

	public void Initialize(GeneratorInitializationContext context) {
		// No initialization required
	}


}


