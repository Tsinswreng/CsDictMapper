// 需引用Microsoft.CodeAnalysis相关包
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
#pragma warning disable RS1035
public class G{
	public static string Path = "./Tsinswreng.SrcGen.log.txt";
	public static void Write(string s){
		File.WriteAllText(Path, s);
	}

	public static void Write(string Path, string s){
		File.WriteAllText("./Tsinswreng.SrcGen/"+Path, s);
	}

}

namespace Tsinswreng.SrcGen {
	[Generator]
	public class HelloGenerator : ISourceGenerator {
		public void Initialize(GeneratorInitializationContext context) {
			//Debugger.Launch();
			// 注册语法接收器以收集类声明
			Directory.CreateDirectory("./Tsinswreng.SrcGen");
			context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
		}

		public void Execute(GeneratorExecutionContext context) {
			if (context.SyntaxReceiver is not SyntaxReceiver receiver)
				return;

			foreach (var classDecl in receiver.CandidateClasses) {
				var model = context.Compilation.GetSemanticModel(classDecl.SyntaxTree);
				var classSymbol = model.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;
				// 检查类是否标记了[Hello]注解
				bool hasHelloAttribute = classSymbol.GetAttributes()
					.Any(attr => attr.AttributeClass?.Name == "HelloAttribute");

				if (!hasHelloAttribute) continue;

				// 构建生成的代码
				string namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
				//TODO 全局命名空間會變成"<global namespace>" 洏致錯

				string source = $@"
// <auto-generated/>
namespace {namespaceName}
{{
    public partial class {classSymbol.Name}
    {{
        public string Hello {{ get; set; }} = ""Hello World"";
    }}
}}";
				var FileName = $"{classSymbol.Name}.Hello.g.cs";
				G.Write(FileName, source);//t

				// 将代码添加到编译上下文
				context.AddSource(FileName, SourceText.From(source, Encoding.UTF8));
			}
		}
	}

	// 语法接收器用于收集所有类声明
	internal class SyntaxReceiver : ISyntaxReceiver {
		public List<ClassDeclarationSyntax> CandidateClasses { get; } = new();

		public void OnVisitSyntaxNode(SyntaxNode syntaxNode) {
			if (syntaxNode is ClassDeclarationSyntax classDecl)
				CandidateClasses.Add(classDecl);
		}
	}
}

public class HelloAttribute : Attribute { }
